[[[ added func: print with 1 params and label: ]]]
[[[ added func: printi with 1 params and label: ]]]
print param:2(1)
printi param:3(1)
[FIRST_PROGRAM_POINT]
[set_func_label] label print for function print
[set_func_label] label printi for function printi
(END_OF)  [FIRST_PROGRAM_POINT]
Lex Ate token void__
Lex Ate token  id__main__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[main]>>
[[[ added func: main with 0 params and label: ]]]
FuncHead_IR for func: main
got label label_29 in line: -1
[set_func_label] label label_29 for function main
[get_func_label] main's label is: label_29
written label: label_29
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token bool__
Lex Ate token  id__x__
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[x]type:[]>>
<<adding var: [x] of type [5]>>[Statement_IR: States->SignleState]  nextlistSize=0
Lex Ate token if__
[MARKER IR]: label: bp_label_0
Lex Ate token  (__
Lex Ate token  id__x__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[x]>>
[Exp_IR] Exp -> id: x
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: x
[MARKER IR]: label: bp_label_1
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true\n"__
[Exp_IR] Exp -> string"true\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_2
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false\n"__
[Exp_IR] Exp -> string"false\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 0 with label: bp_label_0
Lex Ate token bool__
[MARKER IR]: label: bp_label_4
Lex Ate token  id__y__
Lex Ate token  =__
Lex Ate token  num__30__
Lex Ate token  RelOp__!=__
[Exp_IR] Exp -> Num:30
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__30__
Lex Ate token  ;__
[Exp_IR] Exp -> Num:30
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 != Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 != Exp2
<<[Statement_Semantic][TypeID_SC] id:[y]type:[]>>
<<adding var: [y] of type [5]>><<Statement_Semantic with id[y]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_4
Lex Ate token bool__
[MARKER IR]: label: bp_label_5
Lex Ate token  id__z__
Lex Ate token  =__
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__1__
Lex Ate token B__
<<[Exp_Semantic] B:[1]>>
[Exp_IR] Exp -> Num Bb
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
END_OF [Exp_IR] Exp -> Num B
Lex Ate token  RelOp__==__
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token and__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_6
Lex Ate token not__
Lex Ate token  id__y__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[y]>>
[Exp_IR] Exp -> id: y
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: y
[SJ_Exp_IR]: 
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1: falselistSize: 1
exp2: falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 2
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_7
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token true__
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: true
(Exp) falselistSize: 0
(Exp) truelistSize: 0
ENDOF_[Exp->(Exp)]
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: true
(Exp) falselistSize: 0
(Exp) truelistSize: 0
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: true
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_7
exp1: truelistSize: 1
exp2:true truelistSize: 1
Exp: falselistSize: 0
Exp: truelistSize: 2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 0
(Exp) truelistSize: 2
ENDOF_[Exp->(Exp)]
Lex Ate token and__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_8
Lex Ate token not__
Lex Ate token not__
Lex Ate token not__
Lex Ate token  id__x__
Lex Ate token and__
<<[Exp_Semantic_Id] id:[x]>>
[Exp_IR] Exp -> id: x
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: x
[SJ_Exp_IR]: 
[SJ_Exp_IR]: 
[SJ_Exp_IR]: 
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1: falselistSize: 0
exp2: falselistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 1
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_9
Lex Ate token not__
Lex Ate token not__
Lex Ate token false__
[SJ_Exp_IR]: false
Lex Ate token or__
[SJ_Exp_IR]: 
[SJ_Exp_IR]: 
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1: falselistSize: 1
exp2: falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 0
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_10
Lex Ate token true__
[SJ_Exp_IR]: true
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_10
exp1: truelistSize: 0
exp2:true truelistSize: 1
Exp: falselistSize: 0
Exp: truelistSize: 1
<<[Statement_Semantic][TypeID_SC] id:[z]type:[]>>
<<adding var: [z] of type [5]>><<Statement_Semantic with id[z]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_5
Lex Ate token if__
[MARKER IR]: label: bp_label_11
Lex Ate token  (__
Lex Ate token  id__z__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[z]>>
[Exp_IR] Exp -> id: z
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: z
[MARKER IR]: label: bp_label_12
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true\n"__
[Exp_IR] Exp -> string"true\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_13
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false\n"__
[Exp_IR] Exp -> string"false\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_11
Lex Ate token  id__x__
[MARKER IR]: label: bp_label_15
Lex Ate token  =__
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__0__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:0
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_16
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__10__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:10
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_17
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__11__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:11
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_18
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__12__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:12
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_19
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__13__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:13
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_20
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__14__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:14
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_21
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__15__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:15
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_22
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__16__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:16
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_23
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__17__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:17
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_24
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__18__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:18
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_25
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__19__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:19
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_26
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__111__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_27
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__1__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__111__
Lex Ate token )__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_28
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__111__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_29
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__1__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__111__
Lex Ate token )__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_30
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__111__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_31
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__1__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__111__
Lex Ate token )__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_32
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__111__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_33
Lex Ate token  (__
Lex Ate token  (__
Lex Ate token  num__1__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__111__
Lex Ate token )__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token or__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_34
Lex Ate token  (__
Lex Ate token  num__111__
Lex Ate token  RelOp__==__
[Exp_IR] Exp -> Num:111
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
Lex Ate token  num__1__
Lex Ate token )__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
not a bool var so no SJ_exp after effects 
[Exp_IR]:Relop Exp -> Exp1 == Exp2
END_OF [Exp_IR]:Relop Exp -> Exp1 == Exp2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_34
exp1: truelistSize: 1
exp2: truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 2
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_33
exp1: truelistSize: 1
exp2: truelistSize: 2
Exp: falselistSize: 1
Exp: truelistSize: 3
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 3
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_32
exp1: truelistSize: 1
exp2: truelistSize: 3
Exp: falselistSize: 1
Exp: truelistSize: 4
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 4
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_31
exp1: truelistSize: 1
exp2: truelistSize: 4
Exp: falselistSize: 1
Exp: truelistSize: 5
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 5
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_30
exp1: truelistSize: 1
exp2: truelistSize: 5
Exp: falselistSize: 1
Exp: truelistSize: 6
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 6
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_29
exp1: truelistSize: 1
exp2: truelistSize: 6
Exp: falselistSize: 1
Exp: truelistSize: 7
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 7
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_28
exp1: truelistSize: 1
exp2: truelistSize: 7
Exp: falselistSize: 1
Exp: truelistSize: 8
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 8
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_27
exp1: truelistSize: 1
exp2: truelistSize: 8
Exp: falselistSize: 1
Exp: truelistSize: 9
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 9
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_26
exp1: truelistSize: 1
exp2: truelistSize: 9
Exp: falselistSize: 1
Exp: truelistSize: 10
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 10
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_25
exp1: truelistSize: 1
exp2: truelistSize: 10
Exp: falselistSize: 1
Exp: truelistSize: 11
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 11
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_24
exp1: truelistSize: 1
exp2: truelistSize: 11
Exp: falselistSize: 1
Exp: truelistSize: 12
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 12
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_23
exp1: truelistSize: 1
exp2: truelistSize: 12
Exp: falselistSize: 1
Exp: truelistSize: 13
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 13
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_22
exp1: truelistSize: 1
exp2: truelistSize: 13
Exp: falselistSize: 1
Exp: truelistSize: 14
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 14
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_21
exp1: truelistSize: 1
exp2: truelistSize: 14
Exp: falselistSize: 1
Exp: truelistSize: 15
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 15
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_20
exp1: truelistSize: 1
exp2: truelistSize: 15
Exp: falselistSize: 1
Exp: truelistSize: 16
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 16
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_19
exp1: truelistSize: 1
exp2: truelistSize: 16
Exp: falselistSize: 1
Exp: truelistSize: 17
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 17
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_18
exp1: truelistSize: 1
exp2: truelistSize: 17
Exp: falselistSize: 1
Exp: truelistSize: 18
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 18
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_17
exp1: truelistSize: 1
exp2: truelistSize: 18
Exp: falselistSize: 1
Exp: truelistSize: 19
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 19
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_16
exp1: truelistSize: 1
exp2: truelistSize: 19
Exp: falselistSize: 1
Exp: truelistSize: 20
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 20
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<Statement_Semantic with id[x]=exp>>
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_15
Lex Ate comment:// checking whether you use registers to save truth values

Lex Ate token if__
[MARKER IR]: label: bp_label_35
Lex Ate token  (__
Lex Ate token  id__x__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[x]>>
[Exp_IR] Exp -> id: x
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: x
[MARKER IR]: label: bp_label_36
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true\n"__
[Exp_IR] Exp -> string"true\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_37
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false\n"__
[Exp_IR] Exp -> string"false\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_35
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: main
If void, an extra ret will be added
Ret type: 1
[Program_IR] backpatching line number 4 with [get_func_label] main's label is: label_29
label_29
[get_func_label] main's label is: label_29
ignore me1 (label_29)
[END_OF Program_IR]
