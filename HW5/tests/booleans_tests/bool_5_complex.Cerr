[[[ added func: print with 1 params and label: ]]]
[[[ added func: printi with 1 params and label: ]]]
print param:2(1)
printi param:3(1)
[FIRST_PROGRAM_POINT]
[set_func_label] label print for function print
[set_func_label] label printi for function printi
(END_OF)  [FIRST_PROGRAM_POINT]
Lex Ate token void__
Lex Ate token  id__main__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[main]>>
[[[ added func: main with 0 params and label: ]]]
FuncHead_IR for func: main
got label label_29 in line: -1
[set_func_label] label label_29 for function main
[get_func_label] main's label is: label_29
written label: label_29
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token bool__
Lex Ate token  id__t1__
Lex Ate token  =__
Lex Ate token true__
Lex Ate token or__
[SJ_Exp_IR]: true
[MARKER IR]: label: bp_label_0
Lex Ate token not__
Lex Ate token true__
[SJ_Exp_IR]: true
Lex Ate token  ;__
[SJ_Exp_IR]: 
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_0
exp1:true truelistSize: 1
exp2: truelistSize: 0
Exp: falselistSize: 1
Exp: truelistSize: 1
<<[Statement_Semantic][TypeID_SC] id:[t1]type:[]>>
<<adding var: [t1] of type [5]>><<Statement_Semantic with id[t1]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States->SignleState]  nextlistSize=3
Lex Ate token if__
[MARKER IR]: label: bp_label_1
Lex Ate token  (__
Lex Ate token  id__t1__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[t1]>>
[Exp_IR] Exp -> id: t1
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t1
[MARKER IR]: label: bp_label_2
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true1\n"__
[Exp_IR] Exp -> string"true1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_3
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false1\n"__
[Exp_IR] Exp -> string"false1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_1
Lex Ate token bool__
[MARKER IR]: label: bp_label_5
Lex Ate token  id__t2__
Lex Ate token  =__
Lex Ate token not__
Lex Ate token not__
Lex Ate token  id__t1__
Lex Ate token  ;__
<<[Exp_Semantic_Id] id:[t1]>>
[Exp_IR] Exp -> id: t1
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t1
[SJ_Exp_IR]: 
<<[Statement_Semantic][TypeID_SC] id:[t2]type:[]>>
<<adding var: [t2] of type [5]>><<Statement_Semantic with id[t2]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_5
Lex Ate token if__
[MARKER IR]: label: bp_label_6
Lex Ate token  (__
Lex Ate token  id__t2__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[t2]>>
[Exp_IR] Exp -> id: t2
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t2
[MARKER IR]: label: bp_label_7
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true2\n"__
[Exp_IR] Exp -> string"true2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_8
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false2\n"__
[Exp_IR] Exp -> string"false2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_6
Lex Ate token bool__
[MARKER IR]: label: bp_label_10
Lex Ate token  id__t3__
Lex Ate token  =__
Lex Ate token not__
Lex Ate token  id__t1__
Lex Ate token or__
<<[Exp_Semantic_Id] id:[t1]>>
[Exp_IR] Exp -> id: t1
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t1
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_11
Lex Ate token  id__t2__
Lex Ate token  ;__
<<[Exp_Semantic_Id] id:[t2]>>
[Exp_IR] Exp -> id: t2
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t2
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_11
exp1: truelistSize: 1
exp2:t2 truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
<<[Statement_Semantic][TypeID_SC] id:[t3]type:[]>>
<<adding var: [t3] of type [5]>><<Statement_Semantic with id[t3]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_10
Lex Ate token if__
[MARKER IR]: label: bp_label_12
Lex Ate token  (__
Lex Ate token  id__t3__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[t3]>>
[Exp_IR] Exp -> id: t3
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t3
[MARKER IR]: label: bp_label_13
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true3\n"__
[Exp_IR] Exp -> string"true3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_14
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false3\n"__
[Exp_IR] Exp -> string"false3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_12
Lex Ate token bool__
[MARKER IR]: label: bp_label_16
Lex Ate token  id__t4__
Lex Ate token  =__
Lex Ate token  (__
Lex Ate token  id__t1__
Lex Ate token and__
<<[Exp_Semantic_Id] id:[t1]>>
[Exp_IR] Exp -> id: t1
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t1
[MARKER IR]: label: bp_label_17
Lex Ate token  id__t2__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[t2]>>
[Exp_IR] Exp -> id: t2
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t2
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:t1 falselistSize: 1
exp2:t2 falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 2
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token and__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_18
Lex Ate token  id__t3__
Lex Ate token  ;__
<<[Exp_Semantic_Id] id:[t3]>>
[Exp_IR] Exp -> id: t3
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t3
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1: falselistSize: 2
exp2:t3 falselistSize: 1
Exp: falselistSize: 3
Exp: truelistSize: 1
<<[Statement_Semantic][TypeID_SC] id:[t4]type:[]>>
<<adding var: [t4] of type [5]>><<Statement_Semantic with id[t4]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_16
Lex Ate token if__
[MARKER IR]: label: bp_label_19
Lex Ate token  (__
Lex Ate token  id__t4__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[t4]>>
[Exp_IR] Exp -> id: t4
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t4
[MARKER IR]: label: bp_label_20
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true4\n"__
[Exp_IR] Exp -> string"true4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_21
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false4\n"__
[Exp_IR] Exp -> string"false4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_19
Lex Ate token if__
[MARKER IR]: label: bp_label_23
Lex Ate token  (__
Lex Ate token  id__t1__
Lex Ate token and__
<<[Exp_Semantic_Id] id:[t1]>>
[Exp_IR] Exp -> id: t1
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t1
[MARKER IR]: label: bp_label_24
Lex Ate token  (__
Lex Ate token  id__t2__
Lex Ate token and__
<<[Exp_Semantic_Id] id:[t2]>>
[Exp_IR] Exp -> id: t2
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t2
[MARKER IR]: label: bp_label_25
Lex Ate token  id__t3__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[t3]>>
[Exp_IR] Exp -> id: t3
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: t3
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:t2 falselistSize: 1
exp2:t3 falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 2
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token )__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:t1 falselistSize: 1
exp2: falselistSize: 2
Exp: falselistSize: 3
Exp: truelistSize: 1
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_26
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"true5\n"__
[Exp_IR] Exp -> string"true5\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_27
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  str__"false5\n"__
[Exp_IR] Exp -> string"false5\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
[get_func_label] print's label is: print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_23
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: main
If void, an extra ret will be added
Ret type: 1
[Program_IR] backpatching line number 4 with [get_func_label] main's label is: label_29
label_29
[get_func_label] main's label is: label_29
ignore me1 (label_29)
[END_OF Program_IR]
