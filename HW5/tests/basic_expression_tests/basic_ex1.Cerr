[[[ added func: print with 1 params and label: ]]]
[[[ added func: printi with 1 params and label: ]]]
print param:2(1)
printi param:3(1)
[FIRST_PROGRAM_POINT]
[set_func_label] label print for function print
[set_func_label] label printi for function printi
(END_OF)  [FIRST_PROGRAM_POINT]
Lex Ate token void__
Lex Ate token  id__main__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[main]>>
[[[ added func: main with 0 params and label: ]]]
FuncHead_IR for func: main
got label label_29 in line: -1
[set_func_label] label label_29 for function main
[get_func_label] main's label is: label_29
written label: label_29
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token int__
Lex Ate token  id__x__
Lex Ate token  =__
Lex Ate token  num__1__
Lex Ate token  ;__
[Exp_IR] Exp -> Num:1
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT:label_29}}}}
END_OF [Exp_IR] Exp -> Num
<<[Statement_Semantic][TypeID_SC] id:[x]type:[]>>
<<adding var: [x] of type [3]>><<Statement_Semantic with id[x]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token return__
[MARKER IR]: label: bp_label_0
Lex Ate token  ;__
[Statement_IR] Return void
[get_func_label] main's label is: label_29
{{{{ NOT RELEVANT2:label_29}}}}
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_0
Lex Ate comment:// TODO - we need to deal with function without return

Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: main
If void, an extra ret will be added
Ret type: 1
[Program_IR] backpatching line number 4 with [get_func_label] main's label is: label_29
label_29
[get_func_label] main's label is: label_29
ignore me1 (label_29)
[END_OF Program_IR]
