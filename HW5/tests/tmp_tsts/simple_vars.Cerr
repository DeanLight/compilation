[[[ added func: print with 1 params]]]
[[[ added func: printi with 1 params]]]
print param:2(1)
printi param:3(1)
[FIRST_PROGRAM_POINT]
[set_func_label] label print for function print
[set_func_label] label printi for function printi
(END_OF)  [FIRST_PROGRAM_POINT]
Lex Ate token void__
Lex Ate token  id__main__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[main]>>
[[[ added func: main with 0 params]]]
FuncHead_IR for func: main
got label label_27 in line: -1
[set_func_label] label label_27 for function main
[get_func_label] main's label is: label_27
written label: label_27
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token int__
Lex Ate token  id__x__
Lex Ate token  =__
Lex Ate token  num__10__
Lex Ate token  ;__
[Exp_IR] Exp -> Num:10
[get_func_label] main's label is: label_27
{{{{ NOT RELEVANT:label_27}}}}
END_OF [Exp_IR] Exp -> Num
<<[Statement_Semantic][TypeID_SC] id:[x]type:[]>>
<<adding var: [x] of type [3]>><<Statement_Semantic with id[x]=exp>>
Lex Ate token  id__printi__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers
END_OF CallHeader_IR
Lex Ate token  id__x__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[x]>>
[Exp_IR] Exp -> id: x
END_OF [Exp_IR] Exp -> id
<<ExpList_Semantic>> explist -> exp
exp is of type INT
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments printi
[get_func_label] printi's label is: printi
[Emitter] REstore_registers: 1
ERROR: Reg not given yet. req:0 while max used is 0
END_OF [Call_IR]
Lex Ate token  ;__
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: main
If void, an extra ret will be added
Ret type: 1
[Program_IR] backpatching line number 2 with [get_func_label] main's label is: label_27
label_27
[get_func_label] main's label is: label_27
ignore me1 (label_27)
[END_OF Program_IR]
