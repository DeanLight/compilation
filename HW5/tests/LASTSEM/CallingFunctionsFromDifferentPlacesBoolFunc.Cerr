[FIRST_PROGRAM_POINT]
(END_OF)  [FIRST_PROGRAM_POINT]
Lex Ate comment://Call can come from Statement and from Exp.

Lex Ate token bool__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[funcByteTrue]>>
FuncHead_IR for func: funcByteTrue
got label label_29 in line: -1
written label: label_29
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"funcByteTrue\n"__
[Exp_IR] Exp -> string"funcByteTrue\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token return__
[MARKER IR]: label: bp_label_0
Lex Ate token true__
Lex Ate token  ;__
<<RetExp, ExpT:[5] scopeT:[5]>>
[Statement_IR] Return noneVoid
END_OF [Statement_IR] Return noneVoid
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_0 breaklist size is 0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: funcByteTrue
for an extra ret will be added
Ret type: 5
Lex Ate token bool__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[funcByteFalse]>>
FuncHead_IR for func: funcByteFalse
got label label_73 in line: -1
written label: label_73
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"funcByteFalse\n"__
[Exp_IR] Exp -> string"funcByteFalse\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token return__
[MARKER IR]: label: bp_label_2
Lex Ate token false__
Lex Ate token  ;__
<<RetExp, ExpT:[5] scopeT:[5]>>
[Statement_IR] Return noneVoid
END_OF [Statement_IR] Return noneVoid
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_2 breaklist size is 0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: funcByteFalse
for an extra ret will be added
Ret type: 5
Lex Ate token bool__
Lex Ate token  id__helperFunc1True__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[helperFunc1True]>>
FuncHead_IR for func: helperFunc1True
got label label_117 in line: -1
written label: label_117
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token return__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token  ;__
<<RetExp, ExpT:[5] scopeT:[5]>>
[Statement_IR] Return noneVoid
ERROR: Asked last regs, when  none are used
ERROR: Asked last regs, when  none are used
ERROR: Asked to free reg when currently 0 are used
END_OF [Statement_IR] Return noneVoid
[Statement_IR: States->SignleState]  nextlistSize=0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: helperFunc1True
for an extra ret will be added
Ret type: 5
Lex Ate token bool__
Lex Ate token  id__helperFunc1False__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[helperFunc1False]>>
FuncHead_IR for func: helperFunc1False
got label label_150 in line: -1
written label: label_150
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token return__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: -1
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=-1
[Emitter] REstore_registers: -1
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token  ;__
<<RetExp, ExpT:[5] scopeT:[5]>>
[Statement_IR] Return noneVoid
ERROR: Asked last regs, when  none are used
ERROR: Asked last regs, when  none are used
ERROR: Asked to free reg when currently 0 are used
END_OF [Statement_IR] Return noneVoid
[Statement_IR: States->SignleState]  nextlistSize=0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: helperFunc1False
for an extra ret will be added
Ret type: 5
Lex Ate token bool__
Lex Ate token  id__helperFunc2True__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[helperFunc2True]>>
FuncHead_IR for func: helperFunc2True
got label label_183 in line: -1
written label: label_183
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token return__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: -1
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=-1
[Emitter] REstore_registers: -1
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteFalse
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token  ;__
<<RetExp, ExpT:[5] scopeT:[5]>>
[Statement_IR] Return noneVoid
ERROR: Asked last regs, when  none are used
ERROR: Asked last regs, when  none are used
ERROR: Asked to free reg when currently 0 are used
END_OF [Statement_IR] Return noneVoid
[Statement_IR: States->SignleState]  nextlistSize=0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: helperFunc2True
for an extra ret will be added
Ret type: 5
Lex Ate token bool__
Lex Ate token  id__helperFunc2False__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[helperFunc2False]>>
FuncHead_IR for func: helperFunc2False
got label label_216 in line: -1
written label: label_216
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token return__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: -1
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=-1
[Emitter] REstore_registers: -1
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteFalse
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token  ;__
<<RetExp, ExpT:[5] scopeT:[5]>>
[Statement_IR] Return noneVoid
ERROR: Asked last regs, when  none are used
ERROR: Asked last regs, when  none are used
ERROR: Asked to free reg when currently 0 are used
END_OF [Statement_IR] Return noneVoid
[Statement_IR: States->SignleState]  nextlistSize=0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: helperFunc2False
for an extra ret will be added
Ret type: 5
Lex Ate token void__
Lex Ate token  id__funcHelper1__
Lex Ate token  (__
Lex Ate token bool__
Lex Ate token  id__a__
<<FormalDecl_Semantic: id[a]>>
Lex Ate token )__
<<FormalsSem>><<FuncHead_semantic, id:[funcHelper1]>>
FuncHead_IR for func: funcHelper1
got label label_249 in line: -1
written label: label_249
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token if__
Lex Ate token  (__
Lex Ate token  id__a__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[a]>>
[Exp_IR] Exp -> id: a
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: a
ERROR: Asked last regs, when  none are used
ERROR: Asked last regs, when  none are used
ERROR: Asked to free reg when currently 0 are used
[MARKER IR]: label: bp_label_8
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: -1
END_OF CallHeader_IR
Lex Ate token  str__"funcHelper1-1\n"__
[Exp_IR] Exp -> string"funcHelper1-1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: -1
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_9
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"funcHelper1-2\n"__
[Exp_IR] Exp -> string"funcHelper1-2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: funcHelper1
for an extra ret will be added
Ret type: 1
Lex Ate token void__
Lex Ate token  id__funcHelper2__
Lex Ate token  (__
Lex Ate token bool__
Lex Ate token  id__a__
<<FormalDecl_Semantic: id[a]>>
Lex Ate token  ,__
Lex Ate token bool__
Lex Ate token  id__bb__
<<FormalDecl_Semantic: id[bb]>>
Lex Ate token )__
<<FormalsSem>><<FuncHead_semantic, id:[funcHelper2]>>
FuncHead_IR for func: funcHelper2
got label label_331 in line: -1
written label: label_331
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token if__
Lex Ate token  (__
Lex Ate token  id__a__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[a]>>
[Exp_IR] Exp -> id: a
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: a
[MARKER IR]: label: bp_label_12
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"funcHelper2-1\n"__
[Exp_IR] Exp -> string"funcHelper2-1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_13
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"funcHelper2-2\n"__
[Exp_IR] Exp -> string"funcHelper2-2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token if__
[MARKER IR]: label: bp_label_15
Lex Ate token  (__
Lex Ate token  id__bb__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb]>>
[Exp_IR] Exp -> id: bb
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb
[MARKER IR]: label: bp_label_16
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"funcHelper2-3\n"__
[Exp_IR] Exp -> string"funcHelper2-3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_17
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"funcHelper2-4\n"__
[Exp_IR] Exp -> string"funcHelper2-4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_15 breaklist size is 0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: funcHelper2
for an extra ret will be added
Ret type: 1
Lex Ate token void__
Lex Ate token  id__main__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[main]>>
FuncHead_IR for func: main
got label label_488 in line: -1
written label: label_488
END_OF [FuncHead_IR] 
Lex Ate token  {__
Lex Ate token  {__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token bool__
[MARKER IR]: label: bp_label_20
Lex Ate token  id__z1__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[z1]type:[]>>
<<Statement_Semantic with id[z1]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_20 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_21
Lex Ate token  (__
Lex Ate token  id__z1__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[z1]>>
[Exp_IR] Exp -> id: z1
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: z1
[MARKER IR]: label: bp_label_22
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true1\n"__
[Exp_IR] Exp -> string"true1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_23
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false1\n"__
[Exp_IR] Exp -> string"false1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_21 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_25
Lex Ate token  id__z2__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteTrue
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[z2]type:[]>>
<<Statement_Semantic with id[z2]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_25 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_26
Lex Ate token  (__
Lex Ate token  id__z2__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[z2]>>
[Exp_IR] Exp -> id: z2
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: z2
[MARKER IR]: label: bp_label_27
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true2\n"__
[Exp_IR] Exp -> string"true2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_28
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false2\n"__
[Exp_IR] Exp -> string"false2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_26 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_30
Lex Ate token  id__z3__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[z3]type:[]>>
<<Statement_Semantic with id[z3]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_30 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_31
Lex Ate token  (__
Lex Ate token  id__z3__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[z3]>>
[Exp_IR] Exp -> id: z3
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: z3
[MARKER IR]: label: bp_label_32
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true3\n"__
[Exp_IR] Exp -> string"true3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_33
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false3\n"__
[Exp_IR] Exp -> string"false3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_31 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_35
Lex Ate token  id__z4__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteFalse
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[z4]type:[]>>
<<Statement_Semantic with id[z4]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_35 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_36
Lex Ate token  (__
Lex Ate token  id__z4__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[z4]>>
[Exp_IR] Exp -> id: z4
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: z4
[MARKER IR]: label: bp_label_37
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true4\n"__
[Exp_IR] Exp -> string"true4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_38
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false4\n"__
[Exp_IR] Exp -> string"false4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_36 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_40
Lex Ate token  id__c__
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[c]type:[]>>
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_40 breaklist size is 0
Lex Ate token  id__c__
[MARKER IR]: label: bp_label_41
Lex Ate token  =__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token  ;__
<<Statement_Semantic with id[c]=exp>>
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_41 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_42
Lex Ate token  (__
Lex Ate token  id__c__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[c]>>
[Exp_IR] Exp -> id: c
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: c
[MARKER IR]: label: bp_label_43
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true5\n"__
[Exp_IR] Exp -> string"true5\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_44
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false5\n"__
[Exp_IR] Exp -> string"false5\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_42 breaklist size is 0
Lex Ate token  id__c__
[MARKER IR]: label: bp_label_46
Lex Ate token  =__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteTrue
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token  ;__
<<Statement_Semantic with id[c]=exp>>
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_46 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_47
Lex Ate token  (__
Lex Ate token  id__c__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[c]>>
[Exp_IR] Exp -> id: c
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: c
[MARKER IR]: label: bp_label_48
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true6\n"__
[Exp_IR] Exp -> string"true6\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_49
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false6\n"__
[Exp_IR] Exp -> string"false6\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_47 breaklist size is 0
Lex Ate token  id__c__
[MARKER IR]: label: bp_label_51
Lex Ate token  =__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token  ;__
<<Statement_Semantic with id[c]=exp>>
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_51 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_52
Lex Ate token  (__
Lex Ate token  id__c__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[c]>>
[Exp_IR] Exp -> id: c
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: c
[MARKER IR]: label: bp_label_53
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true7\n"__
[Exp_IR] Exp -> string"true7\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_54
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false7\n"__
[Exp_IR] Exp -> string"false7\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_52 breaklist size is 0
Lex Ate token  id__c__
[MARKER IR]: label: bp_label_56
Lex Ate token  =__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteFalse
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
Lex Ate token  ;__
<<Statement_Semantic with id[c]=exp>>
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_56 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_57
Lex Ate token  (__
Lex Ate token  id__c__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[c]>>
[Exp_IR] Exp -> id: c
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: c
[MARKER IR]: label: bp_label_58
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true8\n"__
[Exp_IR] Exp -> string"true8\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_59
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false8\n"__
[Exp_IR] Exp -> string"false8\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_57 breaklist size is 0
Lex Ate token  id__funcByteTrue__
[MARKER IR]: label: bp_label_61
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_61 breaklist size is 0
Lex Ate token  id__funcByteFalse__
[MARKER IR]: label: bp_label_62
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_62 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_63
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter5\n"__
[Exp_IR] Exp -> string"delimiter5\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_63 breaklist size is 0
Lex Ate comment://return funcByteTrue\False():

Lex Ate token bool__
[MARKER IR]: label: bp_label_64
Lex Ate token  id__d__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__helperFunc1True__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments helperFunc1True
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callhelperFunc1True
[Exp_IR] endof Exp->callhelperFunc1True
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[d]type:[]>>
<<Statement_Semantic with id[d]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_64 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_65
Lex Ate token  (__
Lex Ate token  id__d__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[d]>>
[Exp_IR] Exp -> id: d
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: d
[MARKER IR]: label: bp_label_66
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true9\n"__
[Exp_IR] Exp -> string"true9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_67
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false9\n"__
[Exp_IR] Exp -> string"false9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_65 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_69
Lex Ate token  id__dd__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__helperFunc1False__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments helperFunc1False
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callhelperFunc1False
[Exp_IR] endof Exp->callhelperFunc1False
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[dd]type:[]>>
<<Statement_Semantic with id[dd]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_69 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_70
Lex Ate token  (__
Lex Ate token  id__dd__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[dd]>>
[Exp_IR] Exp -> id: dd
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: dd
[MARKER IR]: label: bp_label_71
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true10\n"__
[Exp_IR] Exp -> string"true10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_72
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false10\n"__
[Exp_IR] Exp -> string"false10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_70 breaklist size is 0
Lex Ate comment://return (funcByte()):

Lex Ate token bool__
[MARKER IR]: label: bp_label_74
Lex Ate token  id__e__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__helperFunc2True__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments helperFunc2True
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callhelperFunc2True
[Exp_IR] endof Exp->callhelperFunc2True
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[e]type:[]>>
<<Statement_Semantic with id[e]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_74 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_75
Lex Ate token  (__
Lex Ate token  id__e__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[e]>>
[Exp_IR] Exp -> id: e
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: e
[MARKER IR]: label: bp_label_76
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true9\n"__
[Exp_IR] Exp -> string"true9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_77
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false9\n"__
[Exp_IR] Exp -> string"false9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_75 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_79
Lex Ate token  id__ff__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__helperFunc2False__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments helperFunc2False
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callhelperFunc2False
[Exp_IR] endof Exp->callhelperFunc2False
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[ff]type:[]>>
<<Statement_Semantic with id[ff]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_79 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_80
Lex Ate token  (__
Lex Ate token  id__ff__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[ff]>>
[Exp_IR] Exp -> id: ff
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: ff
[MARKER IR]: label: bp_label_81
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true10\n"__
[Exp_IR] Exp -> string"true10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_82
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false10\n"__
[Exp_IR] Exp -> string"false10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_80 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_84
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[MARKER IR]: label: bp_label_85
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf1\n"__
[Exp_IR] Exp -> string"insideIf1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_86
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_84 breaklist size is 0
[MARKER IR]: label: bp_label_88
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter9\n"__
[Exp_IR] Exp -> string"delimiter9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_88 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_89
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteTrue
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_90
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf2\n"__
[Exp_IR] Exp -> string"insideIf2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_91
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_89 breaklist size is 0
[MARKER IR]: label: bp_label_93
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter10\n"__
[Exp_IR] Exp -> string"delimiter10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_93 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_94
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[MARKER IR]: label: bp_label_95
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf3\n"__
[Exp_IR] Exp -> string"insideIf3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_96
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_94 breaklist size is 0
[MARKER IR]: label: bp_label_98
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter11\n"__
[Exp_IR] Exp -> string"delimiter11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_98 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_99
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteTrue
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_100
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf4\n"__
[Exp_IR] Exp -> string"insideIf4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_101
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_99 breaklist size is 0
[MARKER IR]: label: bp_label_103
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter12\n"__
[Exp_IR] Exp -> string"delimiter12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_103 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_104
Lex Ate token  (__
Lex Ate token true__
[SJ_Exp_IR]: true
Lex Ate token )__
[MARKER IR]: label: bp_label_105
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[MARKER IR]: label: bp_label_106
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_104 breaklist size is 0
[MARKER IR]: label: bp_label_108
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter13\n"__
[Exp_IR] Exp -> string"delimiter13\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_108 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_109
Lex Ate token  (__
Lex Ate token true__
[SJ_Exp_IR]: true
Lex Ate token )__
[MARKER IR]: label: bp_label_110
Lex Ate token  {__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_111
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_109 breaklist size is 0
[MARKER IR]: label: bp_label_113
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter14\n"__
[Exp_IR] Exp -> string"delimiter14\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_113 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_114
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[MARKER IR]: label: bp_label_115
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf1\n"__
[Exp_IR] Exp -> string"insideIf1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_116
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideElse1\n"__
[Exp_IR] Exp -> string"insideElse1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_114 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_118
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter9\n"__
[Exp_IR] Exp -> string"delimiter9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_118 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_119
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteFalse
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_120
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf2\n"__
[Exp_IR] Exp -> string"insideIf2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_121
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideElse2\n"__
[Exp_IR] Exp -> string"insideElse2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_119 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_123
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter10\n"__
[Exp_IR] Exp -> string"delimiter10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_123 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_124
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[MARKER IR]: label: bp_label_125
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf3\n"__
[Exp_IR] Exp -> string"insideIf3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_126
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideElse3\n"__
[Exp_IR] Exp -> string"insideElse3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_124 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_128
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter11\n"__
[Exp_IR] Exp -> string"delimiter11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_128 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_129
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteFalse
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_130
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideIf4\n"__
[Exp_IR] Exp -> string"insideIf4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_131
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideElse4\n"__
[Exp_IR] Exp -> string"insideElse4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_129 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_133
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter12\n"__
[Exp_IR] Exp -> string"delimiter12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_133 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_134
Lex Ate token  (__
Lex Ate token true__
[SJ_Exp_IR]: true
Lex Ate token )__
[MARKER IR]: label: bp_label_135
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[MARKER IR]: label: bp_label_136
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_134 breaklist size is 0
[MARKER IR]: label: bp_label_138
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter13\n"__
[Exp_IR] Exp -> string"delimiter13\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_138 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_139
Lex Ate token  (__
Lex Ate token true__
[SJ_Exp_IR]: true
Lex Ate token )__
[MARKER IR]: label: bp_label_140
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[MARKER IR]: label: bp_label_141
Lex Ate token  id__print__
size of next list for if is1
size of next list for else is0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_139 breaklist size is 0
[MARKER IR]: label: bp_label_143
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter14\n"__
[Exp_IR] Exp -> string"delimiter14\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_143 breaklist size is 0
Lex Ate token while__
[MARKER IR]: label: bp_label_144
[MARKER IR]: label: bp_label_145
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[MARKER IR]: label: bp_label_146
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideWhile1"__
[Exp_IR] Exp -> string"insideWhile1"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_147
Lex Ate token  ;__
 new breakcommand at 3050 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_147 breaklist size is 0
Lex Ate token  }__
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_144 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_149
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter15\n"__
[Exp_IR] Exp -> string"delimiter15\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_149 breaklist size is 0
Lex Ate token while__
[MARKER IR]: label: bp_label_150
[MARKER IR]: label: bp_label_151
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteTrue
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_152
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideWhile2"__
[Exp_IR] Exp -> string"insideWhile2"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_153
Lex Ate token  ;__
 new breakcommand at 3142 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_153 breaklist size is 0
Lex Ate token  }__
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_150 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_155
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter16\n"__
[Exp_IR] Exp -> string"delimiter16\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_155 breaklist size is 0
Lex Ate token while__
[MARKER IR]: label: bp_label_156
[MARKER IR]: label: bp_label_157
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[MARKER IR]: label: bp_label_158
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideWhile3"__
[Exp_IR] Exp -> string"insideWhile3"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_159
Lex Ate token  ;__
 new breakcommand at 3234 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_159 breaklist size is 0
Lex Ate token  }__
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_156 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_161
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter17\n"__
[Exp_IR] Exp -> string"delimiter17\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_161 breaklist size is 0
Lex Ate token while__
[MARKER IR]: label: bp_label_162
[MARKER IR]: label: bp_label_163
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: funcByteTrue
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[SJ_Exp_IR]: 
[MARKER IR]: label: bp_label_164
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"insideWhile4"__
[Exp_IR] Exp -> string"insideWhile4"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_165
Lex Ate token  ;__
 new breakcommand at 3326 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_165 breaklist size is 0
Lex Ate token  }__
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_162 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_167
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter18\n"__
[Exp_IR] Exp -> string"delimiter18\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_167 breaklist size is 0
Lex Ate token while__
[MARKER IR]: label: bp_label_168
[MARKER IR]: label: bp_label_169
Lex Ate token  (__
Lex Ate token true__
[SJ_Exp_IR]: true
Lex Ate token )__
[MARKER IR]: label: bp_label_170
Lex Ate token  {__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_171
Lex Ate token  ;__
 new breakcommand at 3392 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_171 breaklist size is 0
Lex Ate token  }__
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_168 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_173
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter19\n"__
[Exp_IR] Exp -> string"delimiter19\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_173 breaklist size is 0
Lex Ate token byte__
[MARKER IR]: label: bp_label_174
Lex Ate token  id__u__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  num__2__
Lex Ate token B__
<<[Exp_Semantic] B:[2]>>
[Exp_IR] Exp -> Num Bb
[Exp_IR] Exp -> Num:2
END_OF [Exp_IR] Exp -> Num
END_OF [Exp_IR] Exp -> Num B
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[u]type:[]>>
<<Statement_Semantic with id[u]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_174 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_175
Lex Ate token  (__
Lex Ate token  id__u__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[u]>>
[Exp_IR] Exp -> id: u
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_177
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token  :__
Lex Ate token  {__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_178
Lex Ate token  ;__
 new breakcommand at 3474 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_178 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_175 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_181
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter23\n"__
[Exp_IR] Exp -> string"delimiter23\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_181 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_182
Lex Ate token  (__
Lex Ate token  id__u__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[u]>>
[Exp_IR] Exp -> id: u
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_184
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token  :__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_185
Lex Ate token  ;__
 new breakcommand at 3553 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_185 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_182 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_188
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter24\n"__
[Exp_IR] Exp -> string"delimiter24\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_188 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_189
Lex Ate token  (__
Lex Ate token  id__u__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[u]>>
[Exp_IR] Exp -> id: u
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_191
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token  :__
Lex Ate token  {__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_192
Lex Ate token  ;__
 new breakcommand at 3632 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_192 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_189 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_195
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter23\n"__
[Exp_IR] Exp -> string"delimiter23\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_195 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_196
Lex Ate token  (__
Lex Ate token  id__u__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[u]>>
[Exp_IR] Exp -> id: u
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_198
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token  :__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_199
Lex Ate token  ;__
 new breakcommand at 3711 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_199 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_196 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_202
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter24\n"__
[Exp_IR] Exp -> string"delimiter24\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_202 breaklist size is 0
Lex Ate token byte__
[MARKER IR]: label: bp_label_203
Lex Ate token  id__ub__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  num__2__
Lex Ate token B__
<<[Exp_Semantic] B:[2]>>
[Exp_IR] Exp -> Num Bb
[Exp_IR] Exp -> Num:2
END_OF [Exp_IR] Exp -> Num
END_OF [Exp_IR] Exp -> Num B
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[ub]type:[]>>
<<Statement_Semantic with id[ub]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_203 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_204
Lex Ate token  (__
Lex Ate token  id__ub__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[ub]>>
[Exp_IR] Exp -> id: ub
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_206
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token B__
Lex Ate token  :__
Lex Ate token  {__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_207
Lex Ate token  ;__
 new breakcommand at 3801 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_207 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_204 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_210
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter25\n"__
[Exp_IR] Exp -> string"delimiter25\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_210 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_211
Lex Ate token  (__
Lex Ate token  id__ub__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[ub]>>
[Exp_IR] Exp -> id: ub
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_213
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token B__
Lex Ate token  :__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_214
Lex Ate token  ;__
 new breakcommand at 3880 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_214 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_211 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_217
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter26\n"__
[Exp_IR] Exp -> string"delimiter26\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_217 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_218
Lex Ate token  (__
Lex Ate token  id__ub__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[ub]>>
[Exp_IR] Exp -> id: ub
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_220
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token B__
Lex Ate token  :__
Lex Ate token  {__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_221
Lex Ate token  ;__
 new breakcommand at 3959 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_221 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_218 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_224
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter25\n"__
[Exp_IR] Exp -> string"delimiter25\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_224 breaklist size is 0
Lex Ate token switch__
[MARKER IR]: label: bp_label_225
Lex Ate token  (__
Lex Ate token  id__ub__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[ub]>>
[Exp_IR] Exp -> id: ub
END_OF [Exp_IR] Exp -> id
Lex Ate token  {__
[MARKER IR]: label: bp_label_227
Lex Ate token case__
Lex Ate token  num__2__
Lex Ate token B__
Lex Ate token  :__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token break__
[MARKER IR]: label: bp_label_228
Lex Ate token  ;__
 new breakcommand at 4038 the old list had adress list of size 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_228 breaklist size is 0
Lex Ate token  }__
Lex Ate token  ;__
[Statement_IR: state->switch_head caseList ]
CDvec size is  1
[Seggfault test] expreg is $t0
[Seggfault test 2] 
in normal case number0
after else state 10
after else state 20
before backpatching case nextlists
before backpatching case breaklists
reached non empty case in breaking 0outof 0 its breaklist is of size 1
finished backpatching breaklists of yeah 
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_225 breaklist size is 0
Lex Ate token  id__print__
[MARKER IR]: label: bp_label_231
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"delimiter26\n"__
[Exp_IR] Exp -> string"delimiter26\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_231 breaklist size is 0
Lex Ate token  id__funcHelper1__
[MARKER IR]: label: bp_label_232
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : funcByteTrue
exp is of type BOOL
[ExpList_IR: ExpList->Exp]: funcByteTrue
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments funcHelper1
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_232 breaklist size is 0
Lex Ate token  id__funcHelper2__
[MARKER IR]: label: bp_label_236
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token  ,__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : funcByteTrue
exp is of type BOOL
[ExpList_IR: ExpList->Exp]: funcByteTrue
[ExpList_IR: ExpList->Exp]: funcByteTrue
<<CallSemantics [ID(Exp)] >>
tmpParams: 2
tmpActP: 2
tmptmp: 1
[Call_IR] : with arguments funcHelper2
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_236 breaklist size is 0
Lex Ate token  id__funcHelper1__
[MARKER IR]: label: bp_label_243
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : funcByteFalse
exp is of type BOOL
[ExpList_IR: ExpList->Exp]: funcByteFalse
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments funcHelper1
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_243 breaklist size is 0
Lex Ate token  id__funcHelper2__
[MARKER IR]: label: bp_label_247
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token  ,__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : funcByteFalse
exp is of type BOOL
[ExpList_IR: ExpList->Exp]: funcByteFalse
[ExpList_IR: ExpList->Exp]: funcByteFalse
<<CallSemantics [ID(Exp)] >>
tmpParams: 2
tmpActP: 2
tmptmp: 1
[Call_IR] : with arguments funcHelper2
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_247 breaklist size is 0
Lex Ate comment://Need to check every exp with (funcByte())

Lex Ate comment://bool bb1 = funcByte()*funcByte(); printi(bb1);

Lex Ate comment://bool bb2 = funcByte()/funcByte(); printi(bb2);

Lex Ate comment://bool bb3 = funcByte()+funcByte(); printi(bb3);

Lex Ate comment://bool bb4 = funcByte()-funcByte(); printi(bb4);

Lex Ate comment://calling true

Lex Ate token bool__
[MARKER IR]: label: bp_label_254
Lex Ate token  id__bb5__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[bb5]type:[]>>
<<Statement_Semantic with id[bb5]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_254 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_255
Lex Ate token  (__
Lex Ate token  id__bb5__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb5]>>
[Exp_IR] Exp -> id: bb5
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb5
[MARKER IR]: label: bp_label_256
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true1\n"__
[Exp_IR] Exp -> string"true1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_257
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false1\n"__
[Exp_IR] Exp -> string"false1\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_255 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_259
Lex Ate token  id__aa5__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa5]type:[]>>
<<Statement_Semantic with id[aa5]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_259 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_260
Lex Ate token  (__
Lex Ate token  id__aa5__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa5]>>
[Exp_IR] Exp -> id: aa5
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa5
[MARKER IR]: label: bp_label_261
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true2\n"__
[Exp_IR] Exp -> string"true2\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_262
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false\n"__
[Exp_IR] Exp -> string"false\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_260 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_264
Lex Ate token  id__bb6__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token and__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_265
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteTrue falselistSize: 1
exp2:funcByteTrue falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
<<[Statement_Semantic][TypeID_SC] id:[bb6]type:[]>>
<<Statement_Semantic with id[bb6]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_264 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_266
Lex Ate token  (__
Lex Ate token  id__bb6__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb6]>>
[Exp_IR] Exp -> id: bb6
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb6
[MARKER IR]: label: bp_label_267
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true3\n"__
[Exp_IR] Exp -> string"true3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_268
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false3\n"__
[Exp_IR] Exp -> string"false3\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_266 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_270
Lex Ate token  id__aa6__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token and__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_271
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteTrue falselistSize: 1
exp2:funcByteTrue falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 2
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa6]type:[]>>
<<Statement_Semantic with id[aa6]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_270 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_272
Lex Ate token  (__
Lex Ate token  id__aa6__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa6]>>
[Exp_IR] Exp -> id: aa6
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa6
[MARKER IR]: label: bp_label_273
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true4\n"__
[Exp_IR] Exp -> string"true4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_274
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false4\n"__
[Exp_IR] Exp -> string"false4\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_272 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_276
Lex Ate token  id__bb7__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token or__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_277
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_277
exp1:funcByteTrue truelistSize: 1
exp2:funcByteTrue truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
<<[Statement_Semantic][TypeID_SC] id:[bb7]type:[]>>
<<Statement_Semantic with id[bb7]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_276 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_278
Lex Ate token  (__
Lex Ate token  id__bb7__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb7]>>
[Exp_IR] Exp -> id: bb7
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb7
[MARKER IR]: label: bp_label_279
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true5\n"__
[Exp_IR] Exp -> string"true5\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_280
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false5\n"__
[Exp_IR] Exp -> string"false5\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_278 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_282
Lex Ate token  id__aa7__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token or__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_283
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_283
exp1:funcByteTrue truelistSize: 1
exp2:funcByteTrue truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 2
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa7]type:[]>>
<<Statement_Semantic with id[aa7]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_282 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_284
Lex Ate token  (__
Lex Ate token  id__aa7__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa7]>>
[Exp_IR] Exp -> id: aa7
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa7
[MARKER IR]: label: bp_label_285
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true6\n"__
[Exp_IR] Exp -> string"true6\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_286
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false6\n"__
[Exp_IR] Exp -> string"false6\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_284 breaklist size is 0
Lex Ate comment://calling false

Lex Ate token bool__
[MARKER IR]: label: bp_label_288
Lex Ate token  id__bb8__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[bb8]type:[]>>
<<Statement_Semantic with id[bb8]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_288 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_289
Lex Ate token  (__
Lex Ate token  id__bb8__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb8]>>
[Exp_IR] Exp -> id: bb8
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb8
[MARKER IR]: label: bp_label_290
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true7\n"__
[Exp_IR] Exp -> string"true7\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_291
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false7\n"__
[Exp_IR] Exp -> string"false7\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_289 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_293
Lex Ate token  id__aa8__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token not__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa8]type:[]>>
<<Statement_Semantic with id[aa8]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_293 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_294
Lex Ate token  (__
Lex Ate token  id__aa8__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa8]>>
[Exp_IR] Exp -> id: aa8
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa8
[MARKER IR]: label: bp_label_295
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true8\n"__
[Exp_IR] Exp -> string"true8\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_296
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false8\n"__
[Exp_IR] Exp -> string"false8\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_294 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_298
Lex Ate token  id__bb9__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token and__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_299
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteFalse falselistSize: 1
exp2:funcByteFalse falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
<<[Statement_Semantic][TypeID_SC] id:[bb9]type:[]>>
<<Statement_Semantic with id[bb9]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_298 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_300
Lex Ate token  (__
Lex Ate token  id__bb9__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb9]>>
[Exp_IR] Exp -> id: bb9
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb9
[MARKER IR]: label: bp_label_301
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true9\n"__
[Exp_IR] Exp -> string"true9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_302
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false9\n"__
[Exp_IR] Exp -> string"false9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_300 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_304
Lex Ate token  id__aa9__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token and__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_305
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteFalse falselistSize: 1
exp2:funcByteTrue falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 2
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa9]type:[]>>
<<Statement_Semantic with id[aa9]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_304 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_306
Lex Ate token  (__
Lex Ate token  id__aa9__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa9]>>
[Exp_IR] Exp -> id: aa9
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa9
[MARKER IR]: label: bp_label_307
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true10\n"__
[Exp_IR] Exp -> string"true10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_308
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false10\n"__
[Exp_IR] Exp -> string"false10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_306 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_310
Lex Ate token  id__bb10__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token or__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_311
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_311
exp1:funcByteFalse truelistSize: 1
exp2:funcByteFalse truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
<<[Statement_Semantic][TypeID_SC] id:[bb10]type:[]>>
<<Statement_Semantic with id[bb10]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_310 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_312
Lex Ate token  (__
Lex Ate token  id__bb10__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb10]>>
[Exp_IR] Exp -> id: bb10
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb10
[MARKER IR]: label: bp_label_313
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true11\n"__
[Exp_IR] Exp -> string"true11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_314
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false11\n"__
[Exp_IR] Exp -> string"false11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_312 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_316
Lex Ate token  id__aa10__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token or__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_317
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_317
exp1:funcByteFalse truelistSize: 1
exp2:funcByteFalse truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 2
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa10]type:[]>>
<<Statement_Semantic with id[aa10]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_316 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_318
Lex Ate token  (__
Lex Ate token  id__aa10__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa10]>>
[Exp_IR] Exp -> id: aa10
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa10
[MARKER IR]: label: bp_label_319
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true12\n"__
[Exp_IR] Exp -> string"true12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_320
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false12\n"__
[Exp_IR] Exp -> string"false12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_318 breaklist size is 0
Lex Ate comment://calling true and then false

Lex Ate token bool__
[MARKER IR]: label: bp_label_322
Lex Ate token  id__bb11__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token and__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_323
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteTrue falselistSize: 1
exp2:funcByteFalse falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
<<[Statement_Semantic][TypeID_SC] id:[bb11]type:[]>>
<<Statement_Semantic with id[bb11]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_322 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_324
Lex Ate token  (__
Lex Ate token  id__bb11__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb11]>>
[Exp_IR] Exp -> id: bb11
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb11
[MARKER IR]: label: bp_label_325
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true9\n"__
[Exp_IR] Exp -> string"true9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_326
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false9\n"__
[Exp_IR] Exp -> string"false9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_324 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_328
Lex Ate token  id__aa11__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token and__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_329
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteTrue falselistSize: 1
exp2:funcByteFalse falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 2
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa11]type:[]>>
<<Statement_Semantic with id[aa11]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_328 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_330
Lex Ate token  (__
Lex Ate token  id__aa11__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa11]>>
[Exp_IR] Exp -> id: aa11
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa11
[MARKER IR]: label: bp_label_331
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true10\n"__
[Exp_IR] Exp -> string"true10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_332
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false10\n"__
[Exp_IR] Exp -> string"false10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_330 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_334
Lex Ate token  id__bb12__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token or__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_335
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_335
exp1:funcByteTrue truelistSize: 1
exp2:funcByteFalse truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
<<[Statement_Semantic][TypeID_SC] id:[bb12]type:[]>>
<<Statement_Semantic with id[bb12]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_334 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_336
Lex Ate token  (__
Lex Ate token  id__bb12__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb12]>>
[Exp_IR] Exp -> id: bb12
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb12
[MARKER IR]: label: bp_label_337
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true11\n"__
[Exp_IR] Exp -> string"true11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_338
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false11\n"__
[Exp_IR] Exp -> string"false11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_336 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_340
Lex Ate token  id__aa12__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
Lex Ate token or__
[SJ_Exp_IR]: funcByteTrue
[MARKER IR]: label: bp_label_341
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
[SJ_Exp_IR]: funcByteFalse
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_341
exp1:funcByteTrue truelistSize: 1
exp2:funcByteFalse truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 2
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa12]type:[]>>
<<Statement_Semantic with id[aa12]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_340 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_342
Lex Ate token  (__
Lex Ate token  id__aa12__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa12]>>
[Exp_IR] Exp -> id: aa12
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa12
[MARKER IR]: label: bp_label_343
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true12\n"__
[Exp_IR] Exp -> string"true12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_344
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false12\n"__
[Exp_IR] Exp -> string"false12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_342 breaklist size is 0
Lex Ate comment://calling false and then true

Lex Ate token bool__
[MARKER IR]: label: bp_label_346
Lex Ate token  id__bb13__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token and__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_347
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteFalse falselistSize: 1
exp2:funcByteTrue falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
<<[Statement_Semantic][TypeID_SC] id:[bb13]type:[]>>
<<Statement_Semantic with id[bb13]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_346 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_348
Lex Ate token  (__
Lex Ate token  id__bb13__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb13]>>
[Exp_IR] Exp -> id: bb13
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb13
[MARKER IR]: label: bp_label_349
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true9\n"__
[Exp_IR] Exp -> string"true9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_350
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false9\n"__
[Exp_IR] Exp -> string"false9\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_348 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_352
Lex Ate token  id__aa13__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token and__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_353
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[Exp_IR: Exp-> Exp1 And M Exp2 ] 
exp1:funcByteFalse falselistSize: 1
exp2:funcByteTrue falselistSize: 1
Exp: falselistSize: 2
Exp: truelistSize: 1
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 2
(Exp) truelistSize: 1
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa13]type:[]>>
<<Statement_Semantic with id[aa13]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_352 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_354
Lex Ate token  (__
Lex Ate token  id__aa13__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa13]>>
[Exp_IR] Exp -> id: aa13
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa13
[MARKER IR]: label: bp_label_355
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true10\n"__
[Exp_IR] Exp -> string"true10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_356
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false10\n"__
[Exp_IR] Exp -> string"false10\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_354 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_358
Lex Ate token  id__bb14__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token or__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_359
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token  ;__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_359
exp1:funcByteFalse truelistSize: 1
exp2:funcByteTrue truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
<<[Statement_Semantic][TypeID_SC] id:[bb14]type:[]>>
<<Statement_Semantic with id[bb14]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_358 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_360
Lex Ate token  (__
Lex Ate token  id__bb14__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[bb14]>>
[Exp_IR] Exp -> id: bb14
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: bb14
[MARKER IR]: label: bp_label_361
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true11\n"__
[Exp_IR] Exp -> string"true11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_362
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false11\n"__
[Exp_IR] Exp -> string"false11\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_360 breaklist size is 0
Lex Ate token bool__
[MARKER IR]: label: bp_label_364
Lex Ate token  id__aa14__
Lex Ate token  =__
[MVSP_IR] moving sp for place for new var
Lex Ate token not__
Lex Ate token  (__
Lex Ate token  id__funcByteFalse__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteFalse
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteFalse
[Exp_IR] endof Exp->callfuncByteFalse
Lex Ate token or__
[SJ_Exp_IR]: funcByteFalse
[MARKER IR]: label: bp_label_365
Lex Ate token  id__funcByteTrue__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token )__
<<CallSemantics [ID(Exp)] >>
tmpParams: 0
tmpActP: 0
tmptmp: 1
[Call_IR] : no arguments funcByteTrue
regNum=0
[Emitter] REstore_registers: 0
END_OF [Call_IR]
[Exp_IR] Exp->callfuncByteTrue
[Exp_IR] endof Exp->callfuncByteTrue
[SJ_Exp_IR]: funcByteTrue
Lex Ate token )__
[Exp_IR: Exp-> Exp1 Or M Exp2 ] 
Backpatched label: bp_label_365
exp1:funcByteFalse truelistSize: 1
exp2:funcByteTrue truelistSize: 1
Exp: falselistSize: 1
Exp: truelistSize: 2
[Exp->(Exp)]
(Exp) str_content: 
(Exp) falselistSize: 1
(Exp) truelistSize: 2
ENDOF_[Exp->(Exp)]
[SJ_Exp_IR]: 
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[aa14]type:[]>>
<<Statement_Semantic with id[aa14]=exp>>
[Entered Statment_IR: Type id = exp]
[Statement_next_patcher_IR] previously held nextlist size:2
[Statement_next_patcher_IR] currently held nextlist size:3
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 1 with label: bp_label_364 breaklist size is 0
Lex Ate token if__
[MARKER IR]: label: bp_label_366
Lex Ate token  (__
Lex Ate token  id__aa14__
Lex Ate token )__
<<[Exp_Semantic_Id] id:[aa14]>>
[Exp_IR] Exp -> id: aa14
END_OF [Exp_IR] Exp -> id
[SJ_Exp_IR]: aa14
[MARKER IR]: label: bp_label_367
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"true12\n"__
[Exp_IR] Exp -> string"true12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
[MARKER IR]: label: bp_label_368
Lex Ate token else__
Lex Ate token  {__
Lex Ate token  id__print__
Lex Ate token  (__
CallHeader_IR
[Emitter] store_registers: 0
END_OF CallHeader_IR
Lex Ate token  str__"false12\n"__
[Exp_IR] Exp -> string"false12\n"
END_OF [Exp_IR] Exp -> string
Lex Ate token )__
<<ExpList_Semantic>> explist -> exp : 
exp is of type STRING
[ExpList_IR: ExpList->Exp]: 
<<CallSemantics [ID(Exp)] >>
tmpParams: 1
tmpActP: 1
tmptmp: 1
[Call_IR] : with arguments print
found a string typed parameter print
[Emitter] REstore_registers: 0
END_OF [Call_IR]
Lex Ate token  ;__
[Statement_IR Call] nestlistSize: 0
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR Call] nestlistSize: 1
[Statement_IR: States->SignleState]  nextlistSize=1
Lex Ate token  }__
size of next list for if is1
size of next list for else is1
[Statement_next_patcher_IR] previously held nextlist size:0
[Statement_next_patcher_IR] currently held nextlist size:1
[Statement_IR: States -> states1 M singleState]
Num of nextlist to bp: 3 with label: bp_label_366 breaklist size is 0
Lex Ate token  }__
[FuncDeclNode_IR]: 
checking retType of func: main
for an extra ret will be added
Ret type: 1
[Program_IR] backpatching line number 4 with label_488
