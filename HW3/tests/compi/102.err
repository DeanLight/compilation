Lex Ate token int__
Lex Ate token  id__f__
Lex Ate token  (__
Lex Ate token int__
Lex Ate token  id__x__
<<FormalDecl_Semantic: id[x]>>
Lex Ate token )__
<<FormalsSem>><<FuncHead_semantic, id:[f]>>
Lex Ate token  {__
Lex Ate token return__
Lex Ate token  id__x__
Lex Ate token  BinOp__*__
<<[Exp_Semantic_Id]>>
Lex Ate token  id__x__
Lex Ate token  ;__
<<[Exp_Semantic_Id]>>
<<RetExp, ExpT:[3] scopeT:[3]>>
Lex Ate token  }__
Lex Ate token void__
Lex Ate token  id__main__
Lex Ate token  (__
Lex Ate token )__
<<FuncHead_semantic, id:[main]>>
Lex Ate token  {__
Lex Ate token  id__printi__
Lex Ate token  (__
Lex Ate token  num__50__
Lex Ate token )__
<<CallSemantics! id[printi] type0:[3]>>tmpParams: 1
tmpActP: 1
tmptmp: 1
Lex Ate token  ;__
Lex Ate token bool__
Lex Ate token  id__x__
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[x]type:[]>>
Lex Ate token bool__
Lex Ate token  id__y__
Lex Ate token  =__
Lex Ate token false__
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[y]type:[]>>
<<Statement_Semantic with id[y]=exp>>
Lex Ate token byte__
Lex Ate token  id__semek__
Lex Ate token  ;__
<<[Statement_Semantic][TypeID_SC] id:[semek]type:[]>>
Lex Ate token  id__semek__
Lex Ate token  =__
Lex Ate token  num__252__
Lex Ate token B__
Lex Ate token  BinOp__+__
Lex Ate token  num__5__
Lex Ate token B__
Lex Ate token  ;__
<<Statement_Semantic with id[semek]=exp>>
Lex Ate token  BinOp__/__
